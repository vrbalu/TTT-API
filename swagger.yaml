openapi: 3.0.1
info:
  title: TTT5 API
  description: This API sevres for semestral work of implementing "pi≈°kvorky" for PIA subject.
  contact:
    email: vrbalu00@students.zcu.cz
  license:
    name: MIT license
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
servers:
  - url: localhost:8081/api
tags:
  - name: users
    description: Handling users events
  - name: friendships
    description: Handling friendship events
  - name: login
    description: Handling of log in and log out
  - name: games
    description: Operations during game

paths:
  /users:
    get:
      tags:
        - users
      summary: Get all availible users
      operationId: getAllUsers
      parameters:
        - name: online
          in: query
          description: Status of the user
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: A lsit of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        400:
          description: Invalid input values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'
    post:
      tags:
        - users
      summary: Create a user
      description: Creates a user after successful posting of registration form.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        201:
          description: User created
        400:
          description: Invalid input values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'
    put:
      tags:
        - users
      summary: Edit a user
      description: Edits a user status
      operationId: editUser
      requestBody:
        description: Edited user object
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserStatusUpdate'
        required: true
      responses:
        201:
          description: User created
        400:
          description: Invalid input values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'

  /friendships:
    get:
      tags:
        - friendships
      summary: Get all friendships
      operationId: getAllFriendships
      parameters:
        - name: user
          in: query
          description: Friends of given username
          required: true
          schema:
            type: string
        - name: forRequest
          in: query
          description: Only for listing requests
          required: false
          schema:
            type: string
        - name: isPending
          in: query
          description:  If friendship has pending status
          required: false
          schema:
            type: string
      responses:
        200:
          description: A list of friendships
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Friendship'
        400:
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'
        404:
          description: No friendships available.
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'
    post:
      tags:
        - friendships
      summary: Create a friendship
      description: Create a friendship relation between two users.
      operationId: createFriendship
      requestBody:
        description: Created friendship
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FriendshipCreate'
        required: true
      responses:
        201:
          description: Friendship created
          content:
            application/json:
              schema:
                type: object
        400:
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'

  /friendships/{id}:
    get:
      tags:
        - friendships
      summary: Get friendship by id
      operationId: getFriendship
      parameters:
        - name: id
          in: path
          description: Friendship that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friendship'
        400:
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'
    put:
      tags:
        - friendships
      summary: Update friendship status
      description: Only field that can be updated is status.
      operationId: updateFriendship
      parameters:
        - name: id
          in: path
          description: friendship id to be updated
          required: true
          schema:
            type: string
        - name: isPending
          in: query
          description: if isPending status is updated
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
        400:
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'
    delete:
      tags:
        - friendships
      summary: Delete friendship
      description: Permanently delete a friendship between two users.
      operationId: deleteFriendship
      parameters:
        - name: id
          in: path
          description: The id of a friendship to be deleted
          required: true
          schema:
            type: string
      responses:
        204:
          description: Successfully deleted
        400:
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'
  /sessions:
    post:
      tags:
        - login
      summary: Login a user
      description: Authentication credentials to be verified against DB
      operationId: createSession
      requestBody:
        description: Authentication crenetails
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
        required: true
      responses:
        201:
          description: Session established
        400:
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'
        401:
          description: Unauthorized
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'
  /callback:
    post:
      tags:
        - login
      summary: React on Google OAuth2 callback
      operationId: loginWGoogle
      requestBody:
        description: Google TokenResponse in body
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          description: User logged in via Google
        400:
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'

  /games:
    post:
      tags:
        - games
      summary: Create a game
      description: Creates game between two users.
      operationId: createGame
      requestBody:
        description: Created game object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGame'
        required: true
      responses:
        201:
          description: Game created
          content:
            application/json:
              schema:
                type: object
        400:
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'
    put:
      tags:
        - games
      summary: Update a game status
      operationId: updateGames
      requestBody:
        description: Created game object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGame'
      responses:
        200:
          description: A successful update of game
          content:
            application/json:
              schema:
                type: object
        400:
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'
  /games/stats:
    get:
      tags:
        - games
      summary: Get winner statistics
      operationId: getGameStats
      responses:
        200:
          description: A list of game statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameStats'
        400:
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'
        404:
          description: No games available.
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrResponse'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        password:
          type: string
        extId:
          type: string
        inGame:
          type: boolean
        online:
          type: boolean
        registeredViaGoogle:
          type: boolean
        createdAt:
          type: string
    GameStats:
      type: object
      properties:
        winCount:
          type: integer
        user:
          type: string
    Auth:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    Friendship:
      type: object
      properties:
        id:
          type: string
        user1:
          type: string
        user2:
          type: string
        isPending:
          type: boolean
    FriendshipCreate:
      type: object
      properties:
        user1:
          type: string
        user2:
          type: string
    UserStatusUpdate:
      type: object
      properties:
        username:
          type: string
        online:
          type: boolean
        inGame:
          type: boolean
    UpdateGame:
      type: object
      properties:
        id:
          type: integer
        winner:
          type: string
        isPending:
          type: boolean
        isFinished:
          type: boolean
    CreateGame:
      type: object
      properties:
        user1:
          type: string
        user2:
          type: string
    ApiErrResponse:
      type: object
      properties:
        message:
          type: string